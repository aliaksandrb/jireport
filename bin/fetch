#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'jireport'
require 'yaml'
require 'logger'

include JiReport

ROOT = File.expand_path('../..', __FILE__)
DEFAULT_FETCH_LIMIT = 30

def fetch
  log_path = "#{ROOT}/log"
  Dir.mkdir log_path unless File.exists? log_path

  log = Logger.new(
    File.open("#{log_path}/fetch.log", 'a')
  )
  log.info "--- started ---"

  log.info "reading config/database.yml"
  db_conf = YAML::load File.open "#{ROOT}/config/database.yml"

  log.info "establishing connection with db"
  ActiveRecord::Base.establish_connection db_conf

  log.info "reading config/fetch.yml"
  conf = YAML::load File.open "#{ROOT}/config/fetch.yml"

  new_last_fetch = Time.now

  fetcher = JiraRSSFetch.new :login => conf['login'],
                             :password => conf['password'],
                             :url => conf['url'],
                             :proxy => conf['proxy']
  fetch_limit = conf[:fetch_limit] || DEFAULT_FETCH_LIMIT
  conf['users'].each_key do |user|
    log.info "fetching issues for #{user}"
    issues = fetcher.fetch_changed_issues user, fetch_limit
    log.info "tracking issues for #{user}"
    issues.each do |issue|
      Issue.track issue
    end
  end

  log.info "rewriting config/last_fetch"
  File.open("#{ROOT}/config/last_fetch", 'w') do |file|
    file << new_last_fetch
  end

  log.info "--- finished successfully ---"
rescue StandardError => e
  msg = e.to_log
  STDERR.print msg
  log.error msg
end

fetch
