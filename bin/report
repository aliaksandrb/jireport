#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'jireport'
require 'yaml'
require 'logger'
require 'ostruct'

require 'active_support/time'

include JiReport

REPORT_METADATA = begin
  short_report_columns = [
    {
      :source => [:user, :fullname],
      :header => 'Name',
      :width => 20
    },
    {
      :header => 'Project'
    },
    {
      :source => [:issue, :key],
      :header => 'Task ID',
      :width => 17
    },
    {
      :source => [:issue, :percent],
      :header => '%'
    }
  ]

  detailed = Array.new short_report_columns
  detailed[-1...-1] = [
    {
      :source => [:issue, :summary],
      :header => 'Task Desc',
      :width => 60
    },
    {
      :source => [:issue, :start_date],
      :header => 'Start date'
    },
    {
      :source => [:issue, :end_date],
      :header => 'End date'
    },
    {
      :source => [:issue, :description],
      :header => 'Detailed task description ' +
                 '(what has been done, concerns, issues)',
      :width => 45
    }
  ]
  detailed.push({
    :header => 'Comments',
    :width => 45
  })

  [
    {
      :title => 'Short report',
      :columns => short_report_columns
    },
    {
      :title => 'Detailed report',
      :columns => detailed
    }
  ]
end

ROOT = File.expand_path('../..', __FILE__)

def report name, from_date, to_date
  tmp_path = "#{ROOT}/tmp"
  log_path = "#{ROOT}/log"

  [tmp_path, log_path].each do |path|
    Dir.mkdir path unless File.exist? path
  end

  log = Logger.new(
    File.open("#{log_path}/report.log", 'a')
  )
  log.info "--- started ---"

  log.info "reading config/database.yml"
  db_conf = YAML::load File.open "#{ROOT}/config/database.yml"

  log.info "establishing connection with db"
  ActiveRecord::Base.establish_connection db_conf

  log.info "reading config/fetch.yml"
  conf = YAML::load File.open "#{ROOT}/config/fetch.yml"

  log.info "reading config/google_auth.yml"
  google_conf = YAML::load File.open "#{ROOT}/config/google_auth.yml"

  log.info "gathering report data"
  now = Time.now
  data = []
  conf['users'].each do |user, fullname|
    issues = Issue.where(:assignee => user,
                         :updated_at => from_date..to_date)
    issues.each do |i|
      i.summary = CGI.escape_html i.summary
      i.ended_at ||= now
    end
    data << [OpenStruct.new({ :fullname => fullname }), issues]
  end

  log.info "generating ods data"
  templ_path = "#{ROOT}/config/template.ods"
  tmp_file = "#{tmp_path}/#{name}.ods"
  OdsTemplateFormatter.generate templ_path, tmp_file, REPORT_METADATA, data

  log.info "sending report to google"
  g_cnf = google_conf
  uploader_output = %x[bin/ods_to_google --login='#{g_cnf['login']}' --passwd='#{g_cnf['password']}' --name='#{name}']
  ret = $?
  uploader_output.split('\n').each do |l|
    log.info "  |#{l}"
  end
  raise StandardError, "bin/ods_to_google returned #{$?}" unless ret == 0
  log.info "--- finished successfully ---"
rescue StandardError => e
  msg = e.to_log
  STDERR.print msg
  log.error msg
end


USAGE = 'USAGE: report report_name from_date to_date'

if ARGV.size != 3
  puts USAGE
  exit 1
end

TIME_FMT = '%Y-%m-%d'

from = Time.parse(ARGV[1], TIME_FMT)
to = Time.parse(ARGV[2], TIME_FMT) + 1.day

report ARGV[0], from, to
