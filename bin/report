#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'jireport'
require 'yaml'
require 'logger'
require 'ostruct'

require 'active_support/time'

include JiReport

REPORT_METADATA = begin
  short_report_columns = [
    {
      :source => [:user, :fullname],
      :header => 'Name',
      :width => 20
    },
    {
      :header => 'Project'
    },
    {
      :source => [:issue, :key],
      :header => 'Task ID',
      :width => 17
    },
    {
      :source => [:issue, :percent],
      :header => '%'
    }
  ]

  detailed = Array.new short_report_columns
  detailed[-1...-1] = [
    {
      :source => [:issue, :summary],
      :header => 'Task Desc',
      :width => 60
    },
    {
      :source => [:issue, :start_date],
      :header => 'Start date'
    },
    {
      :source => [:issue, :end_date],
      :header => 'End date'
    },
    {
      :source => [:issue, :description],
      :header => 'Detailed task description ' +
                 '(what has been done, concerns, issues)',
      :width => 45
    }
  ]
  detailed.push({
    :header => 'Comments',
    :width => 45
  })

  [
    {
      :title => 'Short report',
      :columns => short_report_columns
    },
    {
      :title => 'Detailed report',
      :columns => detailed
    }
  ]
end

TMP_PATH = File.expand_path('../../tmp', __FILE__)

def report name, from_date, to_date
  log = Logger.new(
    File.open(File.expand_path('../../log/report.log', __FILE__), 'a')
  )
  log.info "--- started ---"

  log.info "reading config/database.yml"
  db_conf_path = File.expand_path('../../config/database.yml', __FILE__)
  db_conf = YAML::load(File.open(db_conf_path))

  log.info "establishing connection with db"
  ActiveRecord::Base.establish_connection db_conf

  log.info "reading config/fetch.yml"
  conf_path = File.expand_path('../../config/fetch.yml', __FILE__)
  conf = YAML::load(File.open(conf_path))

  log.info "reading config/google_auth.yml"
  google_path = File.expand_path('../../config/google_auth.yml', __FILE__)
  google_conf = YAML::load(File.open(google_path))

  log.info "gathering report data"
  data = []
  conf['users'].each do |user, fullname|
    issues = Issue.where(:assignee => user,
                         :updated_at => from_date..to_date)
    data << [OpenStruct.new({ :fullname => fullname }), issues]
  end

  log.info "generating ods data"
  templ_path = File.expand_path('../../config/template.ods', __FILE__)
  tmp_file = "#{TMP_PATH}/#{name}.ods"
  OdsTemplateFormatter.generate templ_path, tmp_file, REPORT_METADATA, data

  log.info "sending report to google"
  g_cnf = google_conf
  %x[bin/ods_to_google '#{g_cnf['login']}' '#{g_cnf['password']}' '#{name}']
  raise StandardError, "bin/ods_to_google returned #{$?}" unless $? == 0
  log.info "--- finished successfully ---"
rescue StandardError => e
  msg = e.to_log
  STDERR.print msg
  log.error msg
end


USAGE = 'USAGE: report report_name from_date to_date'

if ARGV.size != 3
  puts USAGE
  exit 1
end

TIME_FMT = '%Y-%m-%d'

from = Time.parse(ARGV[1], TIME_FMT)
to = Time.parse(ARGV[2], TIME_FMT) + 1.day

report ARGV[0], from, to
